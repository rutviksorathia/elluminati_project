import 'package:elluminati_project/View/home/home_viewmodel.dart';
import 'package:elluminati_project/models/generated.dart';
import 'package:flutter/material.dart';
import 'package:stacked/stacked.dart';

class HomeView extends StatelessWidget {
  const HomeView({super.key});

  @override
  Widget build(BuildContext context) {
    return ViewModelBuilder<HomeViewModel>.reactive(
      viewModelBuilder: () => HomeViewModel(),
      onViewModelReady: (model) {
        model.readJson();
      },
      builder: (context, model, _) {
        return Scaffold(
          body: Column(
            children: [
              if (model.shouldShowAppBar)
                Container(
                  height: 80,
                  color: Colors.black,
                ),
              Expanded(
                child: SingleChildScrollView(
                  controller: model.apartmentControl,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        height: 220,
                        color: Colors.grey.shade200,
                        child: SizedBox(
                          width: double.infinity,
                          child: Align(
                            alignment: Alignment.bottomLeft,
                            child: Padding(
                              padding: const EdgeInsets.only(
                                bottom: 6,
                              ),
                              child: Container(
                                height: 70,
                                color: Colors.white,
                                width: double.infinity,
                                child: Padding(
                                  padding:
                                      const EdgeInsets.only(top: 12, left: 18),
                                  child: model.autogenerated != null
                                      ? Text(
                                          model.autogenerated!.name.first,
                                          style: const TextStyle(
                                            fontSize: 18,
                                            fontWeight: FontWeight.w500,
                                          ),
                                        )
                                      : null,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          if (model.autogenerated != null)
                            ...model.autogenerated!.specifications.map(
                              (specification) {
                                return Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Padding(
                                      padding: const EdgeInsets.only(
                                          left: 18, right: 18),
                                      child: Row(
                                        children: [
                                          Text(
                                            specification.name.first,
                                            style: const TextStyle(
                                              fontSize: 16,
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                          const SizedBox(width: 2),
                                          const Text(
                                            '*',
                                            style: TextStyle(
                                              fontSize: 16,
                                              fontWeight: FontWeight.bold,
                                              color: Colors.red,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    const Padding(
                                      padding:
                                          EdgeInsets.only(left: 18, right: 18),
                                      child: Text(
                                        'Choose 1',
                                        style: TextStyle(
                                          fontSize: 14,
                                          fontWeight: FontWeight.w300,
                                          color: Colors.grey,
                                        ),
                                      ),
                                    ),
                                    Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        ...specification.list.map((list) {
                                          int? index =
                                              specification.list.indexOf(list);
                                          return Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              if (specification.name.first ==
                                                  'Apartment Size')
                                                Row(
                                                  children: [
                                                    Radio(
                                                      value: index + 1,
                                                      groupValue: model.value,
                                                      onChanged: (value) {
                                                        model.value = value;
                                                        model.price =
                                                            list.price;

                                                        model.notifyListeners();
                                                      },
                                                    ),
                                                    Flexible(
                                                      flex: 1,
                                                      fit: FlexFit.tight,
                                                      child: Text(
                                                        list.name.first,
                                                      ),
                                                    ),
                                                    Text(
                                                      'â‚¹ ${list.price.toString()}',
                                                    ),
                                                  ],
                                                )
                                              else
                                                RightCheck(
                                                  list: list,
                                                  model: model,
                                                ),
                                            ],
                                          );
                                        }).toList(),
                                      ],
                                    ),
                                    const SizedBox(height: 20)
                                  ],
                                );
                              },
                            ).toList(),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              Container(
                height: 70,
                color: Colors.white,
                child: Padding(
                  padding: const EdgeInsets.only(left: 18, right: 18),
                  child: Row(
                    children: [
                      const SizedBox(width: 10),
                      Container(
                        width: 100,
                        height: 40,
                        decoration: BoxDecoration(
                          borderRadius:
                              const BorderRadius.all(Radius.circular(20)),
                          border: Border.all(
                            width: 1,
                            color: Colors.black,
                          ),
                        ),
                        child: Row(
                          children: [
                            Row(
                              children: [
                                GestureDetector(
                                  onTap: model.totalValue != 1
                                      ? () {
                                          model.totalValue =
                                              model.totalValue - 1;
                                          model.notifyListeners();
                                        }
                                      : null,
                                  child: const SizedBox(
                                    width: 30,
                                    child: Center(
                                      child: Text(
                                        '-',
                                      ),
                                    ),
                                  ),
                                ),
                                Container(
                                  width: 1,
                                  color: Colors.black,
                                ),
                                SizedBox(
                                  width: 30,
                                  child: Center(
                                      child: Text(model.totalValue.toString())),
                                ),
                                Container(
                                  width: 1,
                                  color: Colors.black,
                                ),
                                GestureDetector(
                                  onTap: () {
                                    model.totalValue = model.totalValue + 1;

                                    model.price =
                                        model.price * model.totalValue;
                                    model.notifyListeners();
                                  },
                                  child: const SizedBox(
                                    width: 30,
                                    child: Center(
                                      child: Text(
                                        '+',
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(width: 20),
                      Flexible(
                        flex: 1,
                        fit: FlexFit.tight,
                        child: Container(
                          height: 40,
                          decoration: BoxDecoration(
                            borderRadius:
                                const BorderRadius.all(Radius.circular(20)),
                            border: Border.all(
                              width: 1,
                              color: Colors.black,
                            ),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 20, vertical: 8),
                            child: Center(
                                child: Text('Add To Cart - ${model.price}')),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              )
            ],
          ),
        );
      },
    );
  }
}

class RightCheck extends StatefulWidget {
  List1 list;
  HomeViewModel model;

  RightCheck({
    super.key,
    required this.list,
    required this.model,
  });

  @override
  State<RightCheck> createState() => _RightCheckState();
}

class _RightCheckState extends State<RightCheck> {
  int increasePrice = 1;

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Checkbox(
          value: widget.list.isDefaultSelected,
          onChanged: (value) {
            print(value);
            if (value == null) return;
            widget.list.isDefaultSelected = value;
            widget.model.notifyListeners();
            if (value) {
              setState(() {
                print(widget.list.price);
                widget.model.price = widget.model.price + widget.list.price;
              });
            } else {
              setState(() {
                widget.model.price =
                    widget.model.price - (widget.list.price * increasePrice);
              });
            }
          },
        ),
        Flexible(
          flex: 1,
          fit: FlexFit.tight,
          child: Row(
            children: [
              Flexible(
                flex: 1,
                fit: FlexFit.tight,
                child: Text(
                  widget.list.name.first,
                  overflow: TextOverflow.fade,
                ),
              ),
              if (widget.list.isDefaultSelected && widget.list.price != 0)
                Container(
                  width: 100,
                  height: 25,
                  decoration: BoxDecoration(
                    borderRadius: const BorderRadius.all(
                      Radius.circular(
                        20,
                      ),
                    ),
                    border: Border.all(
                      width: 1,
                      color: Colors.black,
                    ),
                  ),
                  child: Row(
                    children: [
                      Row(
                        children: [
                          GestureDetector(
                            onTap: increasePrice != 1
                                ? () {
                                    setState(() {
                                      increasePrice--;
                                      widget.model.price = widget.model.price -
                                          (widget.list.price);
                                      widget.model.notifyListeners();
                                    });
                                  }
                                : null,
                            child: const SizedBox(
                              width: 30,
                              child: Center(
                                child: Text(
                                  '-',
                                ),
                              ),
                            ),
                          ),
                          Container(
                            width: 1,
                            color: Colors.black,
                          ),
                          SizedBox(
                            width: 30,
                            child: Center(
                              child: Text(
                                increasePrice.toString(),
                              ),
                            ),
                          ),
                          Container(
                            width: 1,
                            color: Colors.black,
                          ),
                          GestureDetector(
                            onTap: () {
                              setState(() {
                                increasePrice++;
                                widget.model.price =
                                    widget.model.price + (widget.list.price);
                                widget.model.notifyListeners();
                                print(widget.model.price);
                              });
                            },
                            child: const SizedBox(
                              width: 30,
                              child: Center(
                                child: Text(
                                  '+',
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
            ],
          ),
        ),
        const SizedBox(width: 20),
        Text(
          'â‚¹ ${widget.list.price.toString()}',
        ),
      ],
    );
  }
}
