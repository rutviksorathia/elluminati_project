import 'package:bootstrap_icons/bootstrap_icons.dart';
import 'package:elluminati_project/View/home/home_viewmodel.dart';
import 'package:elluminati_project/models/generated.dart';
import 'package:flutter/material.dart';
import 'package:stacked/stacked.dart';

class HomeView extends StatelessWidget {
  const HomeView({super.key});

  @override
  Widget build(BuildContext context) {
    return ViewModelBuilder<HomeViewModel>.reactive(
      viewModelBuilder: () => HomeViewModel(),
      onViewModelReady: (model) {
        model.readJsonData();
      },
      builder: (context, model, _) {
        return Scaffold(
          body: Column(
            children: [
              if (model.shouldShowAppBar)
                Container(
                  height: 90,
                  width: double.infinity,
                  color: Colors.grey.shade50.withOpacity(0.2),
                  child: const Padding(
                    padding: EdgeInsets.only(top: 45, left: 14),
                    child: Align(
                      alignment: Alignment.topLeft,
                      child: Icon(
                        BootstrapIcons.chevron_left,
                        size: 30,
                      ),
                    ),
                  ),
                ),
              Expanded(
                child: SingleChildScrollView(
                  controller: model.apartmentScrollControl,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        height: 220,
                        color: Colors.grey.shade200,
                        child: SizedBox(
                          width: double.infinity,
                          child: Stack(
                            children: [
                              Center(
                                child: Image.asset('assets/file_icon.png'),
                              ),
                              Align(
                                alignment: Alignment.bottomLeft,
                                child: Padding(
                                  padding: const EdgeInsets.only(
                                    bottom: 6,
                                  ),
                                  child: Container(
                                    height: 70,
                                    color: Colors.white,
                                    width: double.infinity,
                                    child: Padding(
                                      padding: const EdgeInsets.only(
                                          top: 12, left: 18),
                                      child: model.autogenerated != null
                                          ? Text(
                                              model.autogenerated!.name.first,
                                              style: const TextStyle(
                                                fontSize: 18,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            )
                                          : null,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          if (model.autogenerated != null)
                            ApartmentSizeListItem(model: model),
                          if (model.autogenerated != null)
                            ...model.specifications.map(
                              (specification) {
                                int index =
                                    model.specifications.indexOf(specification);
                                bool lastIndex =
                                    (model.specifications.length - 1) == index;
                                return ApartmentFacilitySection(
                                  lastIndex: lastIndex,
                                  model: model,
                                  specification: specification,
                                );
                              },
                            ).toList(),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              Container(
                height: 70,
                decoration: const BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      blurRadius: 20,
                      offset: Offset(20, 20),
                      spreadRadius: 20,
                      color: Colors.grey,
                    ),
                  ],
                  color: Colors.white,
                ),
                child: Padding(
                  padding: const EdgeInsets.only(left: 18, right: 18),
                  child: Row(
                    children: [
                      const SizedBox(width: 10),
                      Container(
                        width: 100,
                        height: 40,
                        decoration: BoxDecoration(
                          borderRadius:
                              const BorderRadius.all(Radius.circular(20)),
                          border: Border.all(
                            width: 1,
                            color: Colors.cyan,
                          ),
                        ),
                        child: Row(
                          children: [
                            Row(
                              children: [
                                GestureDetector(
                                  onTap:
                                      model.facilityIncreaseDecreaseValue != 1
                                          ? () {
                                              model.facilityIncreaseDecreaseValue =
                                                  model.facilityIncreaseDecreaseValue -
                                                      1;
                                              model.notifyListeners();
                                            }
                                          : null,
                                  child: const SizedBox(
                                    width: 30,
                                    child: Center(
                                      child: Text(
                                        '-',
                                        style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.cyan,
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                                Container(
                                  width: 1,
                                  color: Colors.cyan,
                                ),
                                SizedBox(
                                  width: 30,
                                  child: Center(
                                    child: Text(
                                      model.facilityIncreaseDecreaseValue
                                          .toString(),
                                      style: const TextStyle(
                                        fontSize: 14,
                                        color: Colors.cyan,
                                      ),
                                    ),
                                  ),
                                ),
                                Container(
                                  width: 1,
                                  color: Colors.cyan,
                                ),
                                GestureDetector(
                                  onTap: () {
                                    model.facilityIncreaseDecreaseValue =
                                        model.facilityIncreaseDecreaseValue + 1;

                                    model.notifyListeners();
                                  },
                                  child: const SizedBox(
                                    width: 30,
                                    child: Center(
                                      child: Text(
                                        '+',
                                        style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.cyan,
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(width: 20),
                      Flexible(
                        flex: 1,
                        fit: FlexFit.tight,
                        child: Container(
                          height: 40,
                          decoration: BoxDecoration(
                            borderRadius:
                                const BorderRadius.all(Radius.circular(20)),
                            border: Border.all(
                              width: 1,
                              color: Colors.cyan,
                            ),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 20, vertical: 8),
                            child: Center(
                              child: Text(
                                'Add To Cart - ${model.price}.00',
                                style: const TextStyle(
                                  fontSize: 16,
                                  color: Colors.cyan,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              )
            ],
          ),
        );
      },
    );
  }
}

class ApartmentFacilitySection extends StatelessWidget {
  final bool lastIndex;
  HomeViewModel model;
  Specification specification;
  ApartmentFacilitySection({
    super.key,
    required this.lastIndex,
    required this.model,
    required this.specification,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 18, right: 18, top: 8),
          child: Row(
            children: [
              Text(
                specification.name.first,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(width: 2),
              const Text(
                '*',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.red,
                ),
              ),
            ],
          ),
        ),
        const Padding(
          padding: EdgeInsets.only(left: 18, right: 18),
          child: Text(
            'Choose up to 1',
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w300,
              color: Colors.grey,
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.only(right: 18, top: 10, left: 8),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              ...specification.list.map(
                (e) {
                  return ApartmentGivenFacilityListItem(list: e, model: model);
                },
              ).toList(),
            ],
          ),
        ),
        if (!lastIndex)
          Divider(
            color: Colors.grey.shade200,
            thickness: 4,
          ),
      ],
    );
  }
}

class ApartmentSizeListItem extends StatelessWidget {
  HomeViewModel model;
  ApartmentSizeListItem({
    required this.model,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 18, right: 18, top: 8),
          child: Row(
            children: [
              Text(
                model.autogenerated!.specifications.first.name.first,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(width: 2),
              const Text(
                '*',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.red,
                ),
              ),
            ],
          ),
        ),
        const Padding(
          padding: EdgeInsets.only(left: 18, right: 18),
          child: Text(
            'Choose 1',
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w300,
              color: Colors.grey,
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.only(right: 18, top: 10, left: 8),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (model.autogenerated != null)
                ...model.autogenerated!.specifications.first.list.map((list) {
                  int index = model.autogenerated!.specifications.first.list
                      .indexOf(list);

                  return Row(
                    children: [
                      Radio(
                        value: index + 1,
                        groupValue: model.selectedApartmentValue,
                        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                        fillColor: MaterialStateProperty.all(Colors.cyan),
                        onChanged: (value) {
                          model.selectedApartmentValue = value;
                          model.price = list.price;
                          model.handleApartmentSizeRadioButtonTap(list.sId);
                          model.notifyListeners();
                        },
                      ),
                      Flexible(
                        flex: 1,
                        fit: FlexFit.tight,
                        child: Text(
                          list.name.first,
                        ),
                      ),
                      Text(
                        '₹ ${list.price.toString()}.00',
                      ),
                    ],
                  );
                }).toList(),
            ],
          ),
        ),
        Divider(
          color: Colors.grey.shade200,
          thickness: 4,
        ),
      ],
    );
  }
}

class ApartmentGivenFacilityListItem extends StatefulWidget {
  SpecificationList list;
  HomeViewModel model;
  int? sequenceNumber;

  ApartmentGivenFacilityListItem({
    super.key,
    required this.list,
    required this.model,
    this.sequenceNumber,
  });

  @override
  State<ApartmentGivenFacilityListItem> createState() =>
      _ApartmentGivenFacilityListItemState();
}

class _ApartmentGivenFacilityListItemState
    extends State<ApartmentGivenFacilityListItem> {
  int increasePrice = 1;

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Checkbox(
          value: widget.list.isDefaultSelected,
          checkColor: Colors.white,
          activeColor: Colors.cyan,
          onChanged: (value) {
            if (value == null) return;
            widget.list.isDefaultSelected = value;
            widget.model.notifyListeners();
            if (value) {
              setState(() {
                widget.model.price = widget.model.price + widget.list.price;
              });
            } else {
              setState(() {
                widget.model.price =
                    widget.model.price - (widget.list.price * increasePrice);
              });
            }
          },
        ),
        Flexible(
          flex: 1,
          fit: FlexFit.tight,
          child: Text(
            widget.list.name.first,
            overflow: TextOverflow.fade,
            style: TextStyle(
              fontSize: 15,
              fontWeight: FontWeight.w500,
              color: Colors.grey.shade700,
            ),
          ),
        ),
        if (widget.list.isDefaultSelected && widget.list.price != 0)
          Container(
            width: 100,
            height: 25,
            decoration: BoxDecoration(
              borderRadius: const BorderRadius.all(
                Radius.circular(
                  20,
                ),
              ),
              border: Border.all(
                width: 1,
                color: Colors.black,
              ),
            ),
            child: Row(
              children: [
                Row(
                  children: [
                    GestureDetector(
                      onTap: increasePrice != 1
                          ? () {
                              setState(() {
                                increasePrice--;
                                widget.model.price =
                                    widget.model.price - (widget.list.price);
                                widget.model.notifyListeners();
                              });
                            }
                          : null,
                      child: const SizedBox(
                        width: 30,
                        child: Center(
                          child: Text(
                            '-',
                          ),
                        ),
                      ),
                    ),
                    Container(
                      width: 1,
                      color: Colors.black,
                    ),
                    SizedBox(
                      width: 30,
                      child: Center(
                        child: Text(
                          increasePrice.toString(),
                        ),
                      ),
                    ),
                    Container(
                      width: 1,
                      color: Colors.black,
                    ),
                    GestureDetector(
                      onTap: () {
                        setState(() {
                          increasePrice++;
                          widget.model.price =
                              widget.model.price + (widget.list.price);
                          widget.model.notifyListeners();
                        });
                      },
                      child: const SizedBox(
                        width: 30,
                        child: Center(
                          child: Text(
                            '+',
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        const SizedBox(width: 20),
        Text(
          '₹ ${widget.list.price.toString()}.00',
        ),
      ],
    );
  }
}
